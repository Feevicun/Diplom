// import { useTranslation } from 'react-i18next';
import { useState, useEffect, useMemo } from 'react';
import {
  Activity,
  Clock,
  BookOpen,
  Target,
  Calendar,
  Award,
  CheckCircle,
  Coffee,
  FileText,
  Upload,
  MessageSquare,
  Save,
  RefreshCw,
  ThumbsUp,
  Clock3
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';

import {
  LineChart,
  Line,
  CartesianGrid,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  Pie,
  PieChart as RePieChart,
  Cell,
  Bar,
  Area,
  AreaChart
} from 'recharts';

import Header from '@/components/Header';
import Sidebar from '@/components/Sidebar';

// Type definitions
interface ChapterProgress {
  id: number;
  chapter: string;
  progress: number;
  pages: number;
  status: 'approved' | 'revision' | 'draft' | 'not_started';
  lastEdit: string | null;
  uploadedFile: boolean;
  sentForReview: boolean;
}

interface DailyActivity {
  date: string;
  sessions: number;
  timeSpent: number;
  filesUploaded: number;
  saves: number;
}

interface SupervisorFeedback {
  chapter: string;
  comment: string;
  date: string;
  type: 'approved' | 'revision';
  status: 'completed' | 'in_progress';
}

interface Deadline {
  milestone: string;
  deadline: string;
  status: 'completed' | 'in_progress' | 'pending';
  submitted?: string;
}

interface WorkIntensity {
  hour: string;
  intensity: number;
}

interface FileActivity {
  type: string;
  count: number;
  color: string;
}

// –î–∞–Ω—ñ –¥–ª—è –∫—É—Ä—Å–æ–≤–æ—ó/–¥–∏–ø–ª–æ–º–Ω–æ—ó —Ä–æ–±–æ—Ç–∏
const dailyActivityData: DailyActivity[] = [
  { date: '01.02', sessions: 3, timeSpent: 4.2, filesUploaded: 2, saves: 15 },
  { date: '02.02', sessions: 2, timeSpent: 3.1, filesUploaded: 1, saves: 12 },
  { date: '03.02', sessions: 4, timeSpent: 5.8, filesUploaded: 0, saves: 22 },
  { date: '04.02', sessions: 1, timeSpent: 2.3, filesUploaded: 3, saves: 8 },
  { date: '05.02', sessions: 5, timeSpent: 8.3, filesUploaded: 1, saves: 28 },
  { date: '06.02', sessions: 3, timeSpent: 4.7, filesUploaded: 2, saves: 18 },
  { date: '07.02', sessions: 2, timeSpent: 3.5, filesUploaded: 1, saves: 14 }
];

// üîó –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ ThesisTracker
const getThesisTrackerData = (): ChapterProgress[] => {
  try {
    const savedChapters = localStorage.getItem('thesisTrackerChapters');
    if (savedChapters) {
      const parsedChapters = JSON.parse(savedChapters);
      return parsedChapters.map((ch: any) => ({
        id: ch.id,
        chapter: getChapterName(ch.key),
        progress: ch.progress || 0,
        pages: Math.round((ch.progress || 0) / 4), // –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        status: mapThesisTrackerStatus(ch.status),
        lastEdit: ch.uploadedFile ? ch.uploadedFile.uploadDate : null,
        uploadedFile: !!ch.uploadedFile,
        sentForReview: ch.status === 'inProgress' || ch.status === 'completed'
      }));
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö ThesisTracker:', error);
  }
  
  // –î–µ—Ñ–æ–ª—Ç–Ω—ñ –¥–∞–Ω—ñ —è–∫—â–æ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö
  return [
    { 
      id: 1,
      chapter: '–í—Å—Ç—É–ø', 
      progress: 95, 
      pages: 8, 
      status: 'approved', 
      lastEdit: '05.02',
      uploadedFile: true,
      sentForReview: true
    },
    { 
      id: 2,
      chapter: '–†–æ–∑–¥—ñ–ª 1. –¢–µ–æ—Ä–µ—Ç–∏—á–Ω—ñ –æ—Å–Ω–æ–≤–∏', 
      progress: 80, 
      pages: 25, 
      status: 'revision', 
      lastEdit: '06.02',
      uploadedFile: true,
      sentForReview: false
    },
    { 
      id: 3,
      chapter: '–†–æ–∑–¥—ñ–ª 2. –ü—Ä–∞–∫—Ç–∏—á–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞', 
      progress: 60, 
      pages: 18, 
      status: 'draft', 
      lastEdit: '07.02',
      uploadedFile: true,
      sentForReview: false
    },
    { 
      id: 4,
      chapter: '–†–æ–∑–¥—ñ–ª 3. –ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞', 
      progress: 30, 
      pages: 12, 
      status: 'not_started', 
      lastEdit: null,
      uploadedFile: false,
      sentForReview: false
    },
    { 
      id: 5,
      chapter: '–í–∏—Å–Ω–æ–≤–∫–∏', 
      progress: 0, 
      pages: 0, 
      status: 'not_started', 
      lastEdit: null,
      uploadedFile: false,
      sentForReview: false
    }
  ];
};

// –ú–∞–ø—ñ–Ω–≥ —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑ ThesisTracker
const mapThesisTrackerStatus = (status: string): 'approved' | 'revision' | 'draft' | 'not_started' => {
  switch (status) {
    case 'completed': return 'approved';
    case 'inProgress': return 'revision';
    case 'review': return 'draft';
    case 'pending': return 'not_started';
    default: return 'not_started';
  }
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤ —Ä–æ–∑–¥—ñ–ª—ñ–≤
const getChapterName = (key: string): string => {
  const chapterNames: Record<string, string> = {
    intro: '–í—Å—Ç—É–ø',
    theory: '–¢–µ–æ—Ä–µ—Ç–∏—á–Ω—ñ –æ—Å–Ω–æ–≤–∏',
    design: '–ü—Ä–æ–µ–∫—Ç–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞',
    implementation: '–ü—Ä–∞–∫—Ç–∏—á–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è',
    conclusion: '–í–∏—Å–Ω–æ–≤–∫–∏',
    appendix: '–î–æ–¥–∞—Ç–∫–∏',
    sources: '–°–ø–∏—Å–æ–∫ –¥–∂–µ—Ä–µ–ª',
    abstract: '–ê–Ω–æ—Ç–∞—Ü—ñ—è',
    cover: '–¢–∏—Ç—É–ª—å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞',
    content: '–ó–º—ñ—Å—Ç',
    tasks: '–ó–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–∞–∫—Ç–∏–∫–∏',
    diary: '–©–æ–¥–µ–Ω–Ω–∏–∫ –ø—Ä–∞–∫—Ç–∏–∫–∏',
    report: '–ó–≤—ñ—Ç –ø—Ä–æ –ø—Ä–∞–∫—Ç–∏–∫—É'
  };
  return chapterNames[key] || `–†–æ–∑–¥—ñ–ª ${key}`;
};

const supervisorFeedback: SupervisorFeedback[] = [
  {
    chapter: '–í—Å—Ç—É–ø',
    comment: '–î–æ–±—Ä–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π —Ä–æ–∑–¥—ñ–ª, –∞–ª–µ –≤–∞—Ä—Ç–æ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª',
    date: '04.02',
    type: 'approved',
    status: 'completed'
  },
  {
    chapter: '–†–æ–∑–¥—ñ–ª 1',
    comment: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥—ñ—é –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è —Ç–∞ –¥–æ–¥–∞—Ç–∏ –ø–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑',
    date: '06.02',
    type: 'revision',
    status: 'in_progress'
  }
];

const deadlineData: Deadline[] = [
  {
    milestone: '–ü–æ–¥–∞—á–∞ —Ç–µ–º–∏ —Ä–æ–±–æ—Ç–∏',
    deadline: '15.01',
    status: 'completed',
    submitted: '12.01'
  },
  {
    milestone: '–ü–µ—Ä—à–∏–π —Ä–æ–∑–¥—ñ–ª',
    deadline: '15.02',
    status: 'in_progress'
  },
  {
    milestone: '–ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç —Ä–æ–±–æ—Ç–∏',
    deadline: '15.04',
    status: 'pending'
  },
  {
    milestone: '–ó–∞—Ö–∏—Å—Ç —Ä–æ–±–æ—Ç–∏',
    deadline: '25.05',
    status: 'pending'
  }
];

const workIntensityData: WorkIntensity[] = [
  { hour: '9:00', intensity: 12 },
  { hour: '10:00', intensity: 18 },
  { hour: '11:00', intensity: 25 },
  { hour: '12:00', intensity: 15 },
  { hour: '13:00', intensity: 8 },
  { hour: '14:00', intensity: 22 },
  { hour: '15:00', intensity: 35 },
  { hour: '16:00', intensity: 42 },
  { hour: '17:00', intensity: 38 },
  { hour: '18:00', intensity: 28 },
  { hour: '19:00', intensity: 20 },
  { hour: '20:00', intensity: 15 }
];

const projectTitles: Record<string, string> = {
  diploma: '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –î–∏–ø–ª–æ–º–Ω–æ–≥–æ –ü—Ä–æ—î–∫—Ç—É',
  coursework: '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ö—É—Ä—Å–æ–≤–æ—ó –†–æ–±–æ—Ç–∏',
  practice: '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ü—Ä–∞–∫—Ç–∏–∫–∏',
};

const projectButtons: Record<string, string> = {
  diploma: '–î–∏–ø–ª–æ–º–Ω–∞ —Ä–æ–±–æ—Ç–∞',
  coursework: '–ö—É—Ä—Å–æ–≤–∞ —Ä–æ–±–æ—Ç–∞',
  practice: '–ü—Ä–∞–∫—Ç–∏–∫–∞',
};

export default function Analytics() {
  const [projectType, setProjectType] = useState<'diploma' | 'coursework' | 'practice'>('coursework');
  const [lastLoginTime, setLastLoginTime] = useState(new Date());

  // ‚è∞ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É —â–æ—Ö–≤–∏–ª–∏–Ω–∏
  useEffect(() => {
    const interval = setInterval(() => {
      setLastLoginTime(new Date());
    }, 60000);

    return () => clearInterval(interval);
  }, []);

  // üß† –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—î–∫—Ç—É –∑ localStorage —ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
  useEffect(() => {
    const savedType = localStorage.getItem('thesisTrackerProjectType');
    if (savedType === 'diploma' || savedType === 'coursework' || savedType === 'practice') {
      setProjectType(savedType);
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ localStorage
    const handleStorageChange = () => {
      setLastLoginTime(new Date()); // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –¥–ª—è –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    };
    
    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, []);

  // üìä –î–∏–Ω–∞–º—ñ—á–Ω—ñ –¥–∞–Ω—ñ –∑ ThesisTracker
  const chaptersProgressData = useMemo(() => getThesisTrackerData(), [lastLoginTime]);

  // üìä –î–∏–Ω–∞–º—ñ—á–Ω—ñ –¥–∞–Ω—ñ —Ñ–∞–π–ª–æ–≤–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–∑–¥—ñ–ª—ñ–≤
  const fileActivityData: FileActivity[] = useMemo(() => {
    const uploadedFiles = chaptersProgressData.filter((ch: ChapterProgress) => ch.uploadedFile).length;
    const drafts = chaptersProgressData.filter((ch: ChapterProgress) => ch.uploadedFile && !ch.sentForReview).length;
    const sentForReview = chaptersProgressData.filter((ch: ChapterProgress) => ch.uploadedFile && ch.sentForReview).length;
    const notStarted = chaptersProgressData.filter((ch: ChapterProgress) => !ch.uploadedFile).length;

    return [
      {
        type: '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ñ–∞–π–ª–∏',
        count: uploadedFiles,
        color: '#10b981'
      },
      {
        type: '–ß–µ—Ä–Ω–µ—Ç–∫–∏',
        count: drafts,
        color: '#f59e0b'
      },
      {
        type: '–ù–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ',
        count: sentForReview,
        color: '#6366f1'
      },
      {
        type: '–ù–µ —Ä–æ–∑–ø–æ—á–∞–Ω–æ',
        count: notStarted,
        color: '#6b7280'
      }
    ].filter(item => item.count > 0); // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
  }, [chaptersProgressData]);

  // üìÖ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
  function formatLastLogin(date: Date) {
    const now = new Date();

    if (
      date.getDate() === now.getDate() &&
      date.getMonth() === now.getMonth() &&
      date.getFullYear() === now.getFullYear()
    ) {
      return `—Å—å–æ–≥–æ–¥–Ω—ñ ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
    }

    return `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth()+1).toString().padStart(2, '0')}.${date.getFullYear()} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
  }

  const totalSessions = dailyActivityData.reduce((sum, day) => sum + day.sessions, 0);
  const totalTimeSpent = dailyActivityData.reduce((sum, day) => sum + day.timeSpent, 0);
  const totalFilesUploaded = chaptersProgressData.filter((ch: ChapterProgress) => ch.uploadedFile).length;
  const totalSaves = dailyActivityData.reduce((sum, day) => sum + day.saves, 0);
  const averageSessionTime = totalTimeSpent / totalSessions;
  
  const totalPages = chaptersProgressData.reduce((sum: number, ch: ChapterProgress) => sum + ch.pages, 0);
  const overallProgress = chaptersProgressData.reduce((sum: number, ch: ChapterProgress) => sum + ch.progress, 0) / chaptersProgressData.length;

  // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—ñ–≤ (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó)
  const handleFileUpload = (chapterId: number, file: File) => {
    console.log(`Uploading file for chapter ${chapterId}:`, file.name);
    // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
  };

  const handleSendForReview = (chapterId: number) => {
    console.log(`Sending chapter ${chapterId} for review`);
    // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
  };

  return (
    <div className="min-h-screen bg-background flex">
        <div className="hidden md:block">
          <Sidebar />
        </div>

      <div className="flex-1 flex flex-col h-screen">
        <div className="sticky top-0 z-10 bg-[var(--card)] border-b border-[var(--border)]">
          <Header />
        </div>
        <main className="flex-1 overflow-y-auto p-6 space-y-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold"> {projectTitles[projectType]}</h1>
              <p className="text-muted-foreground">–í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏</p>
            </div>
            <div className="flex gap-2">
              <Button variant="outline" size="sm" className="gap-2">
                <FileText className="w-4 h-4" />
                {projectButtons[projectType]}
              </Button>
              <Button variant="outline" size="sm" className="gap-2">
                <Clock className="w-4 h-4" />
                –û—Å—Ç–∞–Ω–Ω—ñ–π –≤—Ö—ñ–¥: {formatLastLogin(lastLoginTime)}
              </Button>
            </div>
          </div>

          {/* –û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ */}
          <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-6 gap-4">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">–°–µ—Å—ñ—ó —Ä–æ–±–æ—Ç–∏</CardTitle>
                <Activity className="h-5 w-5 text-blue-500" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{totalSessions}</div>
                <p className="text-xs text-muted-foreground">–∑–∞ 7 –¥–Ω—ñ–≤</p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">–ß–∞—Å —Ä–æ–±–æ—Ç–∏</CardTitle>
                <Clock className="h-5 w-5 text-green-500" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{totalTimeSpent.toFixed(1)}–≥</div>
                <p className="text-xs text-green-600">–°–µ—Ä–µ–¥–Ω—å–æ {averageSessionTime.toFixed(1)}–≥/—Å–µ—Å—ñ—è</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">–§–∞–π–ª–∏</CardTitle>
                <Upload className="h-5 w-5 text-purple-500" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{totalFilesUploaded}</div>
                <p className="text-xs text-purple-600">–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è</CardTitle>
                <Save className="h-5 w-5 text-indigo-500" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{totalSaves}</div>
                <p className="text-xs text-indigo-600">–∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω—å</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">–ü—Ä–æ–≥—Ä–µ—Å</CardTitle>
                <Target className="h-5 w-5 text-yellow-500" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{Math.round(overallProgress)}%</div>
                <p className="text-xs text-yellow-600">{totalPages} —Å—Ç–æ—Ä—ñ–Ω–æ–∫</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">–í—ñ–¥–≥—É–∫–∏</CardTitle>
                <MessageSquare className="h-5 w-5 text-orange-500" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{supervisorFeedback.length}</div>
                <p className="text-xs text-orange-600">–≤—ñ–¥ –Ω–∞—É–∫–æ–≤–æ–≥–æ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞</p>
              </CardContent>
            </Card>
          </div>

          {/* –ü—Ä–æ–≥—Ä–µ—Å —Ä–æ–∑–¥—ñ–ª—ñ–≤ */}
          <div className="grid grid-cols-1 xl:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BookOpen className="w-5 h-5" />
                  –ü—Ä–æ–≥—Ä–µ—Å —Ä–æ–∑–¥—ñ–ª—ñ–≤
                </CardTitle>
                <CardDescription>–°—Ç–∞—Ç—É—Å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É —Ä–æ–±–æ—Ç–∏</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {chaptersProgressData.map((chapter: ChapterProgress, index: number) => (
                  <div key={index} className="space-y-2">
                    <div className="flex justify-between items-center">
                      <div className="flex items-center gap-2">
                        <span className="font-medium text-sm">{chapter.chapter}</span>
                        <Badge variant={
                          chapter.status === 'approved' ? 'default' :
                          chapter.status === 'revision' ? 'secondary' :
                          'outline'
                        }>
                          {chapter.status === 'approved' ? '–ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ' :
                           chapter.status === 'revision' ? '–ù–∞ –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è' :
                           chapter.status === 'draft' ? '–ß–µ—Ä–Ω–µ—Ç–∫–∞' : '–ù–µ —Ä–æ–∑–ø–æ—á–∞—Ç–æ'}
                        </Badge>
                        {chapter.uploadedFile && !chapter.sentForReview && (
                          <Badge variant="outline" className="text-orange-600 border-orange-300">
                            –ß–µ—Ä–Ω–µ—Ç–∫–∞
                          </Badge>
                        )}
                      </div>
                      <div className="text-sm text-muted-foreground">
                        {chapter.pages} —Å—Ç–æ—Ä. ‚Ä¢ {chapter.lastEdit || '–ù–µ —Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ'}
                      </div>
                    </div>
                    <Progress value={chapter.progress} className="h-2" />
                    
                    {/* –î—ñ—ó –∑ —Ñ–∞–π–ª–∞–º–∏ */}
                    <div className="flex gap-2 flex-wrap">
                      {!chapter.uploadedFile && (
                        <div className="relative">
                          <input
                            type="file"
                            id={`file-upload-${chapter.id}`}
                            className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                            onChange={(e) => {
                              const file = e.target.files?.[0];
                              if (file) {
                                handleFileUpload(chapter.id, file);
                              }
                            }}
                          />
                          <Button
                            asChild
                            size="sm"
                            variant="outline"
                            className="border-[var(--border)] text-[var(--foreground)] hover:bg-[var(--secondary)]"
                          >
                            <label htmlFor={`file-upload-${chapter.id}`} className="flex items-center cursor-pointer">
                              <FileText className="w-4 h-4 mr-1" />
                              –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª
                            </label>
                          </Button>
                        </div>
                      )}

                      {chapter.uploadedFile && !chapter.sentForReview && (
                        <Button
                          size="sm"
                          className="bg-[var(--primary)] text-[var(--primary-foreground)] hover:bg-[var(--primary-foreground)] hover:text-[var(--primary)]"
                          onClick={() => handleSendForReview(chapter.id)}
                        >
                          –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
                        </Button>
                      )}
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Calendar className="w-5 h-5" />
                  –î–µ–¥–ª–∞–π–Ω–∏ —Ç–∞ –µ—Ç–∞–ø–∏
                </CardTitle>
                <CardDescription>–ì—Ä–∞—Ñ—ñ–∫ –∑–¥–∞—á—ñ —Ä–æ–±–æ—Ç–∏ —Ç–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                {deadlineData.map((milestone, index) => (
                  <div key={index} className={`flex items-center justify-between p-3 rounded-lg border-l-4 ${
                    milestone.status === 'completed' ? 'bg-green-50 border-green-500' :
                    milestone.status === 'in_progress' ? 'bg-blue-50 border-blue-500' :
                    'bg-gray-50 border-gray-300'
                  }`}>
                    <div>
                      <p className="font-medium text-sm">{milestone.milestone}</p>
                      <p className="text-xs text-muted-foreground">
                        –î–µ–¥–ª–∞–π–Ω: {milestone.deadline}
                        {milestone.submitted && ` ‚Ä¢ –ó–¥–∞–Ω–æ: ${milestone.submitted}`}
                      </p>
                    </div>
                    <div className="flex items-center gap-2">
                      {milestone.status === 'completed' ? (
                        <CheckCircle className="w-5 h-5 text-green-500" />
                      ) : milestone.status === 'in_progress' ? (
                        <Clock3 className="w-5 h-5 text-blue-500" />
                      ) : (
                        <Clock className="w-5 h-5 text-gray-400" />
                      )}
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </div>

          {/* –í—ñ–¥–≥—É–∫–∏ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞ */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MessageSquare className="w-5 h-5" />
                –í—ñ–¥–≥—É–∫–∏ –Ω–∞—É–∫–æ–≤–æ–≥–æ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞
              </CardTitle>
              <CardDescription>–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–æ —Ä–æ–∑–¥—ñ–ª—ñ–≤ —Ä–æ–±–æ—Ç–∏</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {supervisorFeedback.map((feedback, index) => (
                <div key={index} className={`p-4 rounded-lg border-l-4 ${
                  feedback.type === 'approved' ? 'bg-green-50 border-green-500' :
                  'bg-orange-50 border-orange-500'
                }`}>
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex items-center gap-2">
                      {feedback.type === 'approved' ? (
                        <ThumbsUp className="w-4 h-4 text-green-600" />
                      ) : (
                        <RefreshCw className="w-4 h-4 text-orange-600" />
                      )}
                      <span className="font-medium text-sm">{feedback.chapter}</span>
                      <Badge variant={feedback.status === 'completed' ? 'default' : 'secondary'}>
                        {feedback.status === 'completed' ? '–í–∏–∫–æ–Ω–∞–Ω–æ' :
                         feedback.status === 'in_progress' ? '–í —Ä–æ–±–æ—Ç—ñ' : '–û—á—ñ–∫—É—î'}
                      </Badge>
                    </div>
                    <span className="text-xs text-muted-foreground">{feedback.date}</span>
                  </div>
                  <p className="text-sm text-gray-700">{feedback.comment}</p>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* –ì—Ä–∞—Ñ—ñ–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ */}
          <div className="grid grid-cols-1 xl:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>–©–æ–¥–µ–Ω–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</CardTitle>
                <CardDescription>–°–µ—Å—ñ—ó —Ä–æ–±–æ—Ç–∏ —Ç–∞ —á–∞—Å, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ</CardDescription>
              </CardHeader>
              <CardContent className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={dailyActivityData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="date" />
                    <YAxis yAxisId="left" />
                    <YAxis yAxisId="right" orientation="right" />
                    <Tooltip />
                    <Line yAxisId="left" type="monotone" dataKey="timeSpent" stroke="#6366f1" strokeWidth={2} name="–ß–∞—Å (–≥–æ–¥–∏–Ω–∏)" />
                    <Bar yAxisId="right" dataKey="sessions" fill="#10b981" name="–°–µ—Å—ñ—ó" opacity={0.6} />
                  </LineChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>–§–∞–π–ª–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</CardTitle>
                <CardDescription>–†–æ–∑–ø–æ–¥—ñ–ª —Å—Ç–∞—Ç—É—Å—É —Ñ–∞–π–ª—ñ–≤ —Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤</CardDescription>
              </CardHeader>
              <CardContent className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <RePieChart>
                    <Pie
                      data={fileActivityData}
                      dataKey="count"
                      nameKey="type"
                      cx="50%"
                      cy="50%"
                      outerRadius={100}
                      label={({ count, type }) => `${type}: ${count}`}
                    >
                      {fileActivityData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </RePieChart>
                </ResponsiveContainer>
                {fileActivityData.length === 0 && (
                  <div className="flex items-center justify-center h-full text-muted-foreground">
                    –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ñ–∞–π–ª–∏
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* –Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏ */}
          <Card>
            <CardHeader>
              <CardTitle>–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏ –ø–æ –≥–æ–¥–∏–Ω–∞—Ö</CardTitle>
              <CardDescription>–†–æ–∑–ø–æ–¥—ñ–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø—Ä–æ—Ç—è–≥–æ–º —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è</CardDescription>
            </CardHeader>
            <CardContent className="h-[300px]">
              <ResponsiveContainer width="100%" height="100%">
                <AreaChart data={workIntensityData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="hour" />
                  <YAxis />
                  <Tooltip />
                  <Area type="monotone" dataKey="intensity" stroke="#6366f1" fill="#6366f1" fillOpacity={0.6} name="–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è" />
                </AreaChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>

          {/* –ö–æ—Ä–∏—Å–Ω—ñ —ñ–Ω—Å–∞–π—Ç–∏ */}
          <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Award className="w-5 h-5" />
                  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-sm">–ù–∞–π–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—à–∏–π –¥–µ–Ω—å</span>
                  <Badge variant="outline">05.02 (8.3–≥)</Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm">–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∞ –≥–æ–¥–∏–Ω–∞</span>
                  <Badge variant="secondary">16:00-17:00</Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm">–°–µ—Ä–µ–¥–Ω—è —Å–µ—Å—ñ—è</span>
                  <Badge variant="outline">{averageSessionTime.toFixed(1)} –≥–æ–¥–∏–Ω–∏</Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm">–ß–µ—Ä–Ω–µ—Ç–æ–∫</span>
                  <Badge variant="outline" className="text-orange-600">
                    {chaptersProgressData.filter((ch: ChapterProgress) => ch.uploadedFile && !ch.sentForReview).length}
                  </Badge>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Target className="w-5 h-5" />
                  –ü–æ—Ç–æ—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="p-3 rounded-lg bg-red-50 border-l-4 border-red-500">
                  <p className="text-sm font-medium">–¢–µ—Ä–º—ñ–Ω–æ–≤–æ</p>
                  <p className="text-xs text-muted-foreground">–î–æ–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –†–æ–∑–¥—ñ–ª 1 –¥–æ 15.02</p>
                </div>
                <div className="p-3 rounded-lg bg-blue-50 border-l-4 border-blue-500">
                  <p className="text-sm font-medium">–í —Ä–æ–±–æ—Ç—ñ</p>
                  <p className="text-xs text-muted-foreground">–ù–∞–ø–∏—Å–∞–Ω–Ω—è –†–æ–∑–¥—ñ–ª—É 2 (60% –≥–æ—Ç–æ–≤–æ)</p>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Coffee className="w-5 h-5" />
                  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="p-3 rounded-lg bg-green-50 border-l-4 border-green-500">
                  <p className="text-sm font-medium">–î–æ–±—Ä–µ</p>
                  <p className="text-xs text-muted-foreground">–°—Ç–∞–±—ñ–ª—å–Ω–∞ —Ä–æ–±–æ—Ç–∞ —â–æ–¥–Ω—è –ø—ñ–¥–≤–∏—â—É—î –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</p>
                </div>
                <div className="p-3 rounded-lg bg-yellow-50 border-l-4 border-yellow-500">
                  <p className="text-sm font-medium">–ü–æ—Ä–∞–¥–∞</p>
                  <p className="text-xs text-muted-foreground">–ù–∞–π–∫—Ä–∞—â–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –æ 16:00 - –ø–ª–∞–Ω—É–π—Ç–µ —Å–∫–ª–∞–¥–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Ü–µ–π —á–∞—Å</p>
                </div>
              </CardContent>
            </Card>
          </div>
        </main>
      </div>
    </div>
  );
}